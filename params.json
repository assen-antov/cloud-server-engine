{
  "name": "Cloud Server Engine",
  "tagline": "Cloud Server Engine is a file server implemented as Java servlet. It works over HTTP and in response to POST and GET requests performs operations on server's file system and returns directory listings, file data, etc. in JSON format. ",
  "body": "##Getting started\r\nThe project includes an Ant build file, which produces a web application archive named `cloud-server-engine.war`. The WAR file must be deployed to a Java servlet container (e.g. Apache Tomcat) like any other Java web application. The servlet is mapped to (the case sensitive) paths `engine` and `Engine`. When sending requests to the server the `command` parameter must always be present, followed by parameters specific for the command being sent to the server.\r\n\r\nFor example, to obtain the contents of the root directory of the file server the following request must be sent:\r\n\r\n    https://localhost/cloud-server-engine/Engine?command=list_contents&dir=/\r\n\r\nAll commands will return a JSON formatted response with MIME type `text/html`, except for the `download` command which will return the requested file in `application/octet-stream`. So the result from a directory listing request will look something like:\r\n\r\n    {\r\n      \"directories\": [\r\n        {\r\n          \"name\": \"abc\",\r\n          \"relativePath\": \"/abc\",\r\n          \"lastModified\": 1469281107663,\r\n          \"hasSubdirs\": false\r\n        },\r\n        {\r\n          \"name\": \"new dir\",\r\n          \"relativePath\": \"/new dir\",\r\n          \"lastModified\": 1469253560790,\r\n          \"hasSubdirs\": false\r\n        }\r\n      ],\r\n      \"files\": [\r\n        {\r\n          \"name\": \"cloud-server-engine.war\",\r\n          \"lastModified\": 1469205786720,\r\n          \"size\": 28274461,\r\n          \"hidden\": false,\r\n          \"canRead\": true,\r\n          \"canWrite\": true\r\n        },\r\n        {\r\n          \"name\": \"Infrarch Report Template.pdf\",\r\n          \"lastModified\": 1463293088505,\r\n          \"size\": 132995,\r\n          \"hidden\": false,\r\n          \"canRead\": true,\r\n          \"canWrite\": true\r\n        },\r\n        {\r\n          \"name\": \"web.xml\",\r\n          \"lastModified\": 1469199990879,\r\n          \"size\": 1075,\r\n          \"hidden\": false,\r\n          \"canRead\": true,\r\n          \"canWrite\": true\r\n        }\r\n      ],\r\n      \"resultCode\": 0,\r\n      \"resultMessage\": \"OK\",\r\n      \"query\": {\r\n        \"loggedUserName\": \"admin\",\r\n        \"ip\": \"localhost\",\r\n        \"command\": \"list_contents\",\r\n        \"dir\": \"%2F\"\r\n      },\r\n      \"processingTime\": 6\r\n    }\r\n\r\nServer responses will always include a `resultCode`, a human readable `resultMessage`, the `processingTime` in milliseconds and the contents of the original `query` (including information about the `loggedUserName` and user's `ip`). The `query` parameter will only be missing when responding to requests which include passwords (e.g. `login`, `add_user`, `change_password` and similar commands).\r\n\r\n##Operating the server\r\nFor operating the server you may use any tool that is capable of performing HTTP GET/POST with the request. For example, in Java Script and using jQuery the server may be called with code like the following:\r\n\r\n\t$.post(\"cloud-server-engine/Engine\", {command: \"list_dir\", dir: \"/\"}, \r\n\t\tfunction (result) {\r\n\t\t\tvar data = JSON.parse(result);\r\n\t\t\tif (data.resultCode != 0) {      // 0 - OK\r\n\t\t\t\t// handle error\r\n\t\t\t}\r\n\r\n\t\t\t// do what is required, for example print a list of the directories found:\r\n\t\t\tfor (var i = 0; i < data.directories.length; i++) {\r\n\t\t\t\tvar html = \r\n\t\t\t\t\t\"<a href='?dir=\" + data.directories[i].relativePath + \"'>\" + data.directories[i].name + \"</a>\" + \" \" + \r\n\t\t\t\t\tnew Date(data.directories[i].lastModified).toLocaleString();\r\n\t\t\t}\r\n\t\t\tcontainer.innerHTML = html;  // set the contents of listing's container (e.g. a DIV)\r\n\t\t}\r\n\t);\r\n\r\nThe use of JSON for server responses makes writing client applications in Java Script a convenient and straightforward task.\r\n\r\n##Documentation\r\nDetails about Cloud Server Engine may be found in [project's Wiki](https://github.com/assen-antov/cloud-server-engine/wiki) pages.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}